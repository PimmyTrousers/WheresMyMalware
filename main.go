package main

import (
	"flag"
	"os"
	"strings"

	log "github.com/sirupsen/logrus"

	"github.com/pimmytrousers/WheresMyMalware/malsrc"
	"github.com/pimmytrousers/WheresMyMalware/services/hybrid"
	"github.com/pimmytrousers/WheresMyMalware/services/malshare"
	"github.com/pimmytrousers/WheresMyMalware/services/virustotal"
)

var hash string
var verbose bool
var download bool

func init() {
	flag.StringVar(&hash, "h", "", "Hash to query the various services for")
	flag.BoolVar(&verbose, "v", false, "verbose")
	flag.BoolVar(&download, "d", false, "download the file if found in a service")
}

type initialize func() (malsrc.MalwareService, error)

func main() {
	flag.Parse()
	if hash == "" {
		flag.PrintDefaults()
		os.Exit(1)
	}

	csvSplitHashes := strings.Split(hash, ",")

	for _, hash := range csvSplitHashes {
		_, err := malsrc.GetHashType(hash)
		if err != nil {
			log.Fatalf("invalid hash %s", hash)
		}
	}

	services := map[string]initialize{
		"HybridAnalysis": hybrid.Initialize,
		"VirusTotal":     virustotal.Initialize,
		"MalShare":       malshare.Initialize,
	}

	clients := map[string]malsrc.MalwareService{}

	for name, getService := range services {
		initializedService, err := getService()
		if err != nil {
			log.Warnf("failed to initialize service client for %s: %s", name, err)
			continue
		}

		clients[name] = initializedService

		if verbose {
			log.Infof("initialized service client %s", name)
		}
	}

	for _, hash := range csvSplitHashes {
		for name, client := range clients {
			found, err := client.QueryForSample(hash)
			if err != nil {
				log.Fatalf("failed to query service for sample: %s", err)
			}

			if found {
				log.Infof("found sample %s in %s", hash, name)
			}
		}
	}
}
